load("@rules_cc//cc:defs.bzl", "cc_shared_library")

load("@makeheaders//rules:makeheaders.bzl", "makeheaders")
load("@libs7//plugin:MACROS.bzl", "s7_plugin", "s7_library")

load("//config/cc:CONFIG.bzl",
     "BASE_SRCS", "BASE_DEPS",
     "BASE_COPTS", "BASE_INCLUDE_PATHS",
     "BASE_DEFINES", "BASE_LINKOPTS",
     "PROFILE")

SRCS = BASE_SRCS
DEPS = BASE_DEPS + ["@cjson//:cjson"]
INCLUDE_PATHS = BASE_INCLUDE_PATHS #  + ["-I$(@cjson)/include"]
COPTS         = BASE_COPTS + INCLUDE_PATHS
DEFINES       = BASE_DEFINES
LINKOPTS      = BASE_LINKOPTS

LOCAL_REPO = repository_name()[1:]

################################################################
s7_plugin(
    name          = "cjson_s7",
    srcs          = SRCS + ["libcjson_s7.c", ":mkhdrs"],
    hdrs          = ["cjson_s7.h"],
    includes      = ["."],
    deps          = DEPS + [":cjson_map", ":cjson_array"],
    copts         = COPTS + [
        "-I$(GENDIR)/{}/lib".format(LOCAL_REPO),
        "-I$(GENDIR)/external/{}/lib".format(LOCAL_REPO)
    ],
    linkopts      = LINKOPTS,
    defines       = PROFILE,
    local_defines = DEFINES,
    visibility    = ["//visibility:public"]
)

cc_shared_library(
    name            = "cjson_s7_dso",
    shared_lib_name = select({
        "@platforms//os:macos": "libcjson_s7.dylib",
        "@platforms//os:linux": "libcjson_s7.so",
        # "@platforms//os:windows": "libcjson_s7.dll",
        "//conditions:default": "libcjson_s7.so"
    }),
    deps            = [":cjson_s7"],
    visibility      = ["//visibility:public"]
)

################################################################
s7_library(
    name          = "cjson_array",
    linkstatic    = True,
    srcs          = SRCS + ["cjson_array_s7.c", ":mkhdrs"],
    deps          = DEPS,
    copts         = COPTS + [
        "-I$(GENDIR)/{}/lib".format(LOCAL_REPO),
        "-I$(GENDIR)/external/{}/lib".format(LOCAL_REPO)
    ],
    linkopts      = LINKOPTS,
    local_defines = DEFINES,
)

s7_library(
    name          = "cjson_map",
    linkstatic    = True,
    srcs          = SRCS + ["cjson_map_s7.c", ":mkhdrs"],
    deps          = DEPS,
    copts         = COPTS + [
        "-I$(GENDIR)/{}/lib".format(LOCAL_REPO),
        "-I$(GENDIR)/external/{}/lib".format(LOCAL_REPO)
    ],
    linkopts      = LINKOPTS,
    local_defines = DEFINES
)

################################################################
makeheaders(
    name             = "mkhdrs",
    hdrs_srcs        = [
        "libcjson_s7.c",
        "cjson_array_s7.c",
        "cjson_map_s7.c"
    ],
    additional_srcs = [
        "@liblogc//macros:ansi_colors.h"
    ] + select({
        "@obazl_tools_cc//profile:dev?": [
            "@libs7//macros:s7_logging_debug.h",
            "@liblogc//macros:logging_debug.h"
        ],
        "//conditions:default": [
            "@libs7//macros:s7_logging_ndebug.h",
            "@liblogc//macros:logging_ndebug.h"
        ]
    }),
)

makeheaders(
    name             = "export_hdr",
    out              = "cjson_s7.h",
    export_interface = True,
    hdrs_srcs        = [
        "libcjson_s7.c",
        "cjson_array_s7.c",
        "cjson_map_s7.c"
    ],
    additional_srcs = [
        "@liblogc//macros:ansi_colors.h"
    ] + select({
        "@obazl_tools_cc//profile:dev?": [
            "@libs7//macros:s7_logging_debug.h",
            "@liblogc//macros:logging_debug.h"
        ],
        "//conditions:default": [
            "@libs7//macros:s7_logging_ndebug.h",
            "@liblogc//macros:logging_ndebug.h"
        ]
    }),
)
