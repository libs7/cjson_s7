load("@makeheaders//src:RULES.bzl", "makeheaders")

load("//config/cc:BUILD.bzl",
     "BASE_SRCS", "BASE_DEPS",
     "BASE_COPTS", "BASE_INCLUDE_PATHS",
     "BASE_DEFINES", "BASE_LINKOPTS")

SRCS = BASE_SRCS
DEPS = BASE_DEPS + ["@cjson//:cjson"]
INCLUDE_PATHS = BASE_INCLUDE_PATHS + ["-I$(@cjson)/include"]
COPTS         = BASE_COPTS + INCLUDE_PATHS
DEFINES       = BASE_DEFINES
LINKOPTS      = BASE_LINKOPTS

TOOLCHAINS = ["//:repo_paths"]

exports_files(["trace_dev.h"]) # for testing

################################################################
cc_library(
    name          = "cjson_s7",
    linkstatic    = True,
    alwayslink    = True,
    srcs          = SRCS + ["libcjson_s7.c", ":mkhdrs"],
    hdrs          = ["cjson_s7.h"],
    deps          = DEPS + [":cjson_map", ":cjson_array"],
    copts         = COPTS + ["-I$(GENDIR)/$(@)/src"],
    linkopts      = LINKOPTS,
    local_defines = DEFINES,
    toolchains    = TOOLCHAINS,
    visibility    = ["//visibility:public"]
)

cc_shared_library(
    name            = "cjson_s7_dso",
    shared_lib_name = select({
        "@platforms//os:macos": "libcjson_s7.dylib",
        "@platforms//os:linux": "libcjson_s7.so",
        # "@platforms//os:windows": "libcjson_s7.dll",
        "//conditions:default": "libcjson_s7.so"
    }),
    deps            = [":cjson_s7"],
    visibility      = ["//visibility:public"]
)

################################################################
cc_library(
    name          = "cjson_array",
    linkstatic    = True,
    srcs          = SRCS + ["cjson_array_s7.c", ":mkhdrs"],
    deps          = DEPS,
    copts         = COPTS + ["-I$(GENDIR)/$(@)/src"],
    linkopts      = LINKOPTS,
    local_defines = DEFINES,
    toolchains    = TOOLCHAINS,
)

cc_library(
    name          = "cjson_map",
    linkstatic    = True,
    srcs          = SRCS + ["cjson_map_s7.c", ":mkhdrs"],
    deps          = DEPS,
    copts         = COPTS + ["-I$(GENDIR)/$(@)/src"],
    linkopts      = LINKOPTS,
    toolchains    = TOOLCHAINS,
    local_defines = DEFINES
)

################################################################
makeheaders(
    name             = "mkhdrs",
    hdrs_srcs        = [
        "libcjson_s7.c",
        "cjson_array_s7.c",
        "cjson_map_s7.c"
    ],
    additional_srcs  = select({
        "//config/profile:dev?": [
            ":ansi_colors.h",
            ":trace_dev.h"
        ],
        "//conditions:default": [
            ":trace_prod.h"
        ]
    })
)

makeheaders(
    name             = "export_hdr",
    out              = "cjson_s7.h",
    export_interface = True,
    hdrs_srcs        = [
        "libcjson_s7.c",
        "cjson_array_s7.c",
        "cjson_map_s7.c"
    ],
    additional_srcs  = select({
        "//config/profile:dev?": [
            ":ansi_colors.h",
            ":trace_dev.h"
        ],
        "//conditions:default": [
            ":trace_prod.h"
        ]
    })
)
